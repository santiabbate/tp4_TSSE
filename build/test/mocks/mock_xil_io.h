/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_XIL_IO_H
#define _MOCK_XIL_IO_H

#include "unity.h"
#include "xil_io.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_xil_io_Init(void);
void mock_xil_io_Destroy(void);
void mock_xil_io_Verify(void);




#define Xil_In8_IgnoreAndReturn(cmock_retval) Xil_In8_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Xil_In8_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define Xil_In8_ExpectAndReturn(Addr, cmock_retval) Xil_In8_CMockExpectAndReturn(__LINE__, Addr, cmock_retval)
void Xil_In8_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t Addr, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_Xil_In8_CALLBACK)(uint32_t Addr, int cmock_num_calls);
void Xil_In8_AddCallback(CMOCK_Xil_In8_CALLBACK Callback);
void Xil_In8_Stub(CMOCK_Xil_In8_CALLBACK Callback);
#define Xil_In8_StubWithCallback Xil_In8_Stub
#define Xil_In16_IgnoreAndReturn(cmock_retval) Xil_In16_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Xil_In16_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t cmock_to_return);
#define Xil_In16_ExpectAndReturn(Addr, cmock_retval) Xil_In16_CMockExpectAndReturn(__LINE__, Addr, cmock_retval)
void Xil_In16_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t Addr, uint16_t cmock_to_return);
typedef uint16_t (* CMOCK_Xil_In16_CALLBACK)(uint32_t Addr, int cmock_num_calls);
void Xil_In16_AddCallback(CMOCK_Xil_In16_CALLBACK Callback);
void Xil_In16_Stub(CMOCK_Xil_In16_CALLBACK Callback);
#define Xil_In16_StubWithCallback Xil_In16_Stub
#define Xil_In32_IgnoreAndReturn(cmock_retval) Xil_In32_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Xil_In32_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define Xil_In32_ExpectAndReturn(Addr, cmock_retval) Xil_In32_CMockExpectAndReturn(__LINE__, Addr, cmock_retval)
void Xil_In32_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t Addr, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_Xil_In32_CALLBACK)(uint32_t Addr, int cmock_num_calls);
void Xil_In32_AddCallback(CMOCK_Xil_In32_CALLBACK Callback);
void Xil_In32_Stub(CMOCK_Xil_In32_CALLBACK Callback);
#define Xil_In32_StubWithCallback Xil_In32_Stub
#define Xil_In64_IgnoreAndReturn(cmock_retval) Xil_In64_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Xil_In64_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint64_t cmock_to_return);
#define Xil_In64_ExpectAndReturn(Addr, cmock_retval) Xil_In64_CMockExpectAndReturn(__LINE__, Addr, cmock_retval)
void Xil_In64_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t Addr, uint64_t cmock_to_return);
typedef uint64_t (* CMOCK_Xil_In64_CALLBACK)(uint32_t Addr, int cmock_num_calls);
void Xil_In64_AddCallback(CMOCK_Xil_In64_CALLBACK Callback);
void Xil_In64_Stub(CMOCK_Xil_In64_CALLBACK Callback);
#define Xil_In64_StubWithCallback Xil_In64_Stub
#define Xil_Out8_Ignore() Xil_Out8_CMockIgnore()
void Xil_Out8_CMockIgnore(void);
#define Xil_Out8_Expect(Addr, Value) Xil_Out8_CMockExpect(__LINE__, Addr, Value)
void Xil_Out8_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t Addr, uint8_t Value);
typedef void (* CMOCK_Xil_Out8_CALLBACK)(uint32_t Addr, uint8_t Value, int cmock_num_calls);
void Xil_Out8_AddCallback(CMOCK_Xil_Out8_CALLBACK Callback);
void Xil_Out8_Stub(CMOCK_Xil_Out8_CALLBACK Callback);
#define Xil_Out8_StubWithCallback Xil_Out8_Stub
#define Xil_Out16_Ignore() Xil_Out16_CMockIgnore()
void Xil_Out16_CMockIgnore(void);
#define Xil_Out16_Expect(Addr, Value) Xil_Out16_CMockExpect(__LINE__, Addr, Value)
void Xil_Out16_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t Addr, uint16_t Value);
typedef void (* CMOCK_Xil_Out16_CALLBACK)(uint32_t Addr, uint16_t Value, int cmock_num_calls);
void Xil_Out16_AddCallback(CMOCK_Xil_Out16_CALLBACK Callback);
void Xil_Out16_Stub(CMOCK_Xil_Out16_CALLBACK Callback);
#define Xil_Out16_StubWithCallback Xil_Out16_Stub
#define Xil_Out32_Ignore() Xil_Out32_CMockIgnore()
void Xil_Out32_CMockIgnore(void);
#define Xil_Out32_Expect(Addr, Value) Xil_Out32_CMockExpect(__LINE__, Addr, Value)
void Xil_Out32_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t Addr, uint32_t Value);
typedef void (* CMOCK_Xil_Out32_CALLBACK)(uint32_t Addr, uint32_t Value, int cmock_num_calls);
void Xil_Out32_AddCallback(CMOCK_Xil_Out32_CALLBACK Callback);
void Xil_Out32_Stub(CMOCK_Xil_Out32_CALLBACK Callback);
#define Xil_Out32_StubWithCallback Xil_Out32_Stub
#define Xil_Out64_Ignore() Xil_Out64_CMockIgnore()
void Xil_Out64_CMockIgnore(void);
#define Xil_Out64_Expect(Addr, Value) Xil_Out64_CMockExpect(__LINE__, Addr, Value)
void Xil_Out64_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t Addr, uint64_t Value);
typedef void (* CMOCK_Xil_Out64_CALLBACK)(uint32_t Addr, uint64_t Value, int cmock_num_calls);
void Xil_Out64_AddCallback(CMOCK_Xil_Out64_CALLBACK Callback);
void Xil_Out64_Stub(CMOCK_Xil_Out64_CALLBACK Callback);
#define Xil_Out64_StubWithCallback Xil_Out64_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
